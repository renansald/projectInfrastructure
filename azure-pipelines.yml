trigger:
- none

pool:
  vmImage: ubuntu-latest

stages:
  - stage: tfvalidate
    jobs:
      - job: validateResourceGroup
        continueOnError: false
        steps:
          - task: InstallSSHKey@0
            displayName: installSsh
            inputs:
              knownHostsEntry: '$(knownHostsEntry)'
              sshPublicKey: '$(sshPublicKey)'
              sshKeySecureFile: id_rsa
          - task: TerraformInstaller@1
            displayName: tf install
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/ResourceGroup'
              backendServiceArm: 'sc-azure'
              backendAzureRmResourceGroupName: '$(TF_VAR_RESOURCE_GROUP_NAME)'
              backendAzureRmStorageAccountName: '$(TF_VAR_STORAGE_ACCOUNT_NAME)'
              backendAzureRmContainerName: '$(TF_VAR_CONTAINER_NAME)'
              backendAzureRmKey: '$(TF_VAR_KEY)'
          - task: TerraformTaskV4@4
            displayName: validate
            inputs:
              provider: 'azurerm'
              command: 'validate'
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Database/resource'
              backendServiceArm: 'sc-azure'
              backendAzureRmResourceGroupName: '$(TF_VAR_RESOURCE_GROUP_NAME)'
              backendAzureRmStorageAccountName: '$(TF_VAR_STORAGE_ACCOUNT_NAME)'
              backendAzureRmContainerName: '$(TF_VAR_CONTAINER_NAME)'
              backendAzureRmKey: '$(TF_VAR_KEY)'
          - task: TerraformTaskV4@4
            displayName: validateDatabase
            inputs:
              provider: 'azurerm'
              command: 'validate'
  - stage: tfdeploy
    condition: succeeded('tfvalidate')
    dependsOn: 'tfvalidate'
    jobs:
      - job: apply
        steps:
          - task: InstallSSHKey@0
            displayName: installSsh
            inputs:
              knownHostsEntry: '$(knownHostsEntry)'
              sshPublicKey: '$(sshPublicKey)'
              sshKeySecureFile: id_rsa
          - task: TerraformInstaller@1
            displayName: tf install
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/ResourceGroup'
              backendServiceArm: 'sc-azure'
              backendAzureRmResourceGroupName: '$(TF_VAR_RESOURCE_GROUP_NAME)'
              backendAzureRmStorageAccountName: '$(TF_VAR_STORAGE_ACCOUNT_NAME)'
              backendAzureRmContainerName: '$(TF_VAR_CONTAINER_NAME)'
              backendAzureRmKey: '$(TF_VAR_KEY)'
          - task: TerraformTaskV4@4
            displayName: 'plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/ResourceGroup'
              environmentServiceNameAzureRM: 'sc-azure'
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/ResourceGroup'
              environmentServiceNameAzureRM: 'sc-azure'
          - task: TerraformTaskV4@4
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Database/resource'
              backendServiceArm: 'sc-azure'
              backendAzureRmResourceGroupName: '$(TF_VAR_RESOURCE_GROUP_NAME)'
              backendAzureRmStorageAccountName: '$(TF_VAR_STORAGE_ACCOUNT_NAME)'
              backendAzureRmContainerName: '$(TF_VAR_CONTAINER_NAME)'
              backendAzureRmKey: '$(TF_VAR_KEY)'
          - task: TerraformTaskV4@4
            displayName: 'plan database'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Database/resource'
              environmentServiceNameAzureRM: 'sc-azure'
          - task: TerraformTaskV4@4
            displayName: apply database
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Database/resource'
              environmentServiceNameAzureRM: 'sc-azure'